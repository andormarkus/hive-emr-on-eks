apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: hive-metastore
  name: sidecar-hms-conf-templates
  namespace: emr
data:
  core-site.xml.tpl: "<configuration>\n  {{- if index .Env  \"HIVE_WAREHOUSE_S3LOCATION\"
    \ }}\n  <property>\n    <name>fs.defaultFS</name>\n    <value>s3://{{ .Env.HIVE_WAREHOUSE_S3LOCATION
    }}</value>\n  </property>\n {{- end }}\n <property>\n    <name>fs.s3a.impl</name>\n    <value>org.apache.hadoop.fs.s3a.S3AFileSystem</value>\n
    \ </property>   \n  <property>\n    <name>fs.s3.impl</name>\n    <value>org.apache.hadoop.fs.s3a.S3AFileSystem</value>\n
    \ </property>\n  <property>\n    <name>fs.s3n.impl</name>\n    <value>org.apache.hadoop.fs.s3a.S3AFileSystem</value>\n
    \ </property>\n <property>\n  <name>fs.s3a.aws.credentials.provider</name>\n <value>com.amazonaws.auth.DefaultAWSCredentialsProviderChain</value>\n 
    \ </property>\n </configuration>\n"
  metastore-site.xml.tpl: "<configuration>\n  {{- if eq .Env.HIVE_DB_EXTERNAL \"true\" }}\n
    \  <property>\n
    \         <name>javax.jdo.option.ConnectionURL</name>\n          <value>jdbc:mysql://{{.Env.HIVE_DB_HOST}}:{{.Env.HIVE_DB_PORT}}/{{.Env.HIVE_DB_NAME}}?createDatabaseIfNotExist=true</value>\n        </property>\n        <property>\n          <name>javax.jdo.option.ConnectionDriverName</name>\n
    \         <value>{{ .Env.HIVE_DB_DRIVER}}</value>\n        </property>\n        <property>\n
    \         <name>javax.jdo.option.ConnectionUserName</name>\n          <value>{{
    .Env.HIVE_DB_USER }}</value>\n        </property>\n        <property>\n          <name>
    javax.jdo.option.ConnectionPassword</name>\n          <value>{{ .Env.HIVE_DB_PASS
    }}</value>\n        </property>\n      {{- end }}\n        <property>\n          <name>metastore.expression.proxy</name>\n
    \         <value>org.apache.hadoop.hive.metastore.DefaultPartitionExpressionProxy</value>\n
    \       </property>\n        <property>\n          <name>metastore.task.threads.always</name>\n
    \         <value>org.apache.hadoop.hive.metastore.events.EventCleanerTask,org.apache.hadoop.hive.metastore.MaterializationsCacheCleanerTask</value>\n
    \       </property>\n      <property>\n          <name>hive.metastore.uris</name>\n
    \         <value>thrift:localhost:9083</value>\n        </property>\n        {{- if not (index .Env  \"HIVE_WAREHOUSE_DIR\")  }}\n        <property>\n          <name>hive.metastore.warehouse.dir</name>\n
    \         <value>file:///tmp/</value>\n        </property>\n        {{- else }}\n  
    \  {{- $hive_warehouse_dir :=  regexp.Replace \"(.*)\" \"s3:\\\\$1\" .Env.HIVE_WAREHOUSE_DIR }}\n
    \        <property>\n          <name>hive.metastore.warehouse.dir</name>\n          <value>{{ $hive_warehouse_dir }}</value>\n        </property>  \n      {{- end }}\n
    \    {{- if (index .Env \"HIVE_CONF_PARAMS\")  }}\n        {{- $conf_list := .Env.HIVE_CONF_PARAMS | strings.Split \";\" }}\n        {{- range $parameter := $conf_list}}\n            
    \ {{- $key := regexp.Replace \"(.*):.*\" \"$1\"  $parameter }}\n            {{- $value := regexp.Replace \".*:(.*)\" \"$1\"  $parameter }}\n        <property>\n          
    \ <name>{{ $key }}</name>\n          <value>{{ $value }}</value>\n        </property>\n       {{- end }}\n     {{- end }}\n\n</configuration>"

---

apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: hive-metastore
  name: sidecar-terminate-script
  namespace: emr
data:
  self-terminate.sh: |-
    #!/bin/bash
    # FILE_TO_WATCH="/var/log/fluentd/main-container-terminated"
    FILE_TO_WATCH=$1
    INITIAL_HEARTBEAT_TIMEOUT_THREASHOLD=60
    HEARBEAT_TIMEOUT_THRESHOLD=15
    SLEEP_DURATION=10

    function terminate_main_process() {
      echo "terminating the HMS process.."
      kill -SIGTERM 8
    }

    # Waiting for the first heartbeat sent by Spark main container
    echo "Waiting for file $FILE_TO_WATCH to appear..."
    start_wait=$(date +%s)
    while ! [[ -f "$FILE_TO_WATCH" ]]; do
        elapsed_wait=$(expr $(date +%s) - $start_wait)
        if [ "$elapsed_wait" -gt "$INITIAL_HEARTBEAT_TIMEOUT_THREASHOLD" ]; then
            echo "File $FILE_TO_WATCH not found after $INITIAL_HEARTBEAT_TIMEOUT_THREASHOLD seconds; aborting"
            terminate_main_process
            exit 1
        fi
        sleep $SLEEP_DURATION;
    done;
    echo "Found file $FILE_TO_WATCH; watching for heartbeats..."

    while [[ -f "$FILE_TO_WATCH" ]]; do
        LAST_HEARTBEAT=$(stat -c %Y $FILE_TO_WATCH)
        ELAPSED_TIME_SINCE_AFTER_HEARTBEAT=$(expr $(date +%s) - $LAST_HEARTBEAT)
        if [ "$ELAPSED_TIME_SINCE_AFTER_HEARTBEAT" -gt "$HEARBEAT_TIMEOUT_THRESHOLD" ]; then
            echo "Last heartbeat to file $FILE_TO_WATCH was more than $HEARBEAT_TIMEOUT_THRESHOLD seconds ago at $LAST_HEARTBEAT; terminating"
            terminate_main_process
            exit 0
        fi
        sleep $SLEEP_DURATION;
    done;
    # the file will be deleted once the fluentd container is terminated
    echo "The file $FILE_TO_WATCH doesn't exist anymore;"
    terminate_main_process
    exit 0
---
apiVersion: kubernetes-client.io/v1
kind: ExternalSecret
metadata:
  labels:
    app: hive-metastore
  name: rds-hms-secret
  namespace: emr
spec:
  backendType: secretsManager
  dataFrom:
    - {SECRET_MANAGER_NAME}